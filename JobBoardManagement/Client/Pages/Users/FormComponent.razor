@inject HttpClient _client

<EditForm Model="@user" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class=" form-group">
            <label>UserName </label>
            <div>
                <InputText @bind-Value="@user.Username" class="form-control" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>
        </div>
        <div class="form-group">
            <label>Application: </label>
            <div>
                <InputSelect @bind-Value="user.Applicationid" class="form-control">
                    <option value="">-- Select Application --</option>
                    @if (Applications != null)
                    {
                        foreach (var application in Applications)
                        {
                <option value="@application.Id">
                    - @application.CoverLetter-   @application.ApplicationEmail 
                </option>}
                    }
                </InputSelect>
                <ValidationMessage For="@(() => user.Applicationid)" />
            </div>
        </div>

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
</EditForm>

@code {

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public User user { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Application> Applications;

    protected async override Task OnInitializedAsync()
    {
        Applications = await _client.GetFromJsonAsync<List<Application>>($"{Endpoint.ApplicationsEndPoint}");
    }
}
