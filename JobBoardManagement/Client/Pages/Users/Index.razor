@page "/user/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

    <a href="/user/create" class="btn btn-secondary">
        <span class="oi oi-plus"></span>
        Register user
    </a>
    <br />
    <br />
    @if (users == null)
    {
        <div class="alert alert-info">Loading location...</div>
    }
    else
    {
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Applicationid</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                <tr>
                    <td>@user.Username</td>
                    <td>@user.Applicationid</td>
        
                    <td>
                        <a href="/Colours/view/@user.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Colours/view/@user.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(user.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    }
   
@code {
    private List<User> users;

    protected async override Task OnInitializedAsync()
    {
        users = await _client.GetFromJsonAsync<List<User>>($"{Endpoint.UsersEndPoint}");
    }

    async Task Delete(int userid)
    {
        var user = users.First(q => q.Id == userid);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {user.Username}?");
        if (confirm)

        {
            await _client.DeleteAsync($"{Endpoint.UsersEndPoint}/{userid}");
            await OnInitializedAsync();
        }
    }
    }
