@page "/employee/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

    <a href="/employee/create" class="btn btn-secondary">
        <span class="oi oi-plus"></span>
        Create New Company
    </a>
    <br />
    <br />
    @if (Employers == null)
    {
        <div class="alert alert-info">Loading Company...</div>
    }
    else
    {
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>CompanyName</th>
                    <th>CompanyEmail</th>
                    <th>CompanyNumber</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in Employers)
                {
                    <tr>
                        <td>@employee.CompanyName</td>
                        <td>@employee.CompanyEmail</td>
                        <td>@employee.CompanyNumber</td>
                        <td>
                            <a href="/employee/view/@employee.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/employee/edit/@employee.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(employee.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
   
@code {
    private List<Employer> Employers;

    protected async override Task OnInitializedAsync()
    {
        Employers = await _client.GetFromJsonAsync<List<Employer>>($"{Endpoint.EmployersEndPoint}");
    }

    async Task Delete(int employerid)
    {
        var employer= Employers.First(q => q.Id == employerid);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {employer.CompanyName}?");
        if (confirm)

        {
            await _client.DeleteAsync($"{Endpoint.EmployersEndPoint}/{employerid}");
            await OnInitializedAsync();
        }
    }
    }
