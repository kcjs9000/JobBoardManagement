@inject HttpClient _client

<EditForm Model="@jobDetail" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>JobName: </label>
            <div>
                <InputText @bind-Value="@jobDetail.JobName" class="form-control" />
                <ValidationMessage For="@(() => jobDetail.JobName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Job Description: </label>
            <div>
                <InputText @bind-Value="@jobDetail.JobDescription" class="form-control" />
                <ValidationMessage For="@(() => jobDetail.JobDescription)" />
            </div>
        </div>
        <div class="form-group">
            <label>Job Requirements: </label>
            <div>
                <InputText @bind-Value="@jobDetail.JobRequirements" class="form-control" />
                <ValidationMessage For="@(() => jobDetail.JobRequirements)" />
            </div>
        </div>
        <div class="form-group">
            <label>Positions: </label>
            <div>
                <InputText @bind-Value="@jobDetail.Positions" class="form-control" />
                <ValidationMessage For="@(() => jobDetail.Positions)" />
            </div>
        </div>
        <div class="form-group">
            <label>Benefit: </label>
            <div>
                <InputText @bind-Value="@jobDetail.Benefit" class="form-control" />
                <ValidationMessage For="@(() => jobDetail.Benefit)" />
            </div>
        </div>
        <div class="form-group">
            <label>Salary: </label>
            <div>
                <InputSelect @bind-Value="jobDetail.SalaryId" class="form-control">
                    <option value="">-- Select Salary --</option>
                    @if (Salaries != null)
                    {
                        foreach (var salary in Salaries)
                        {
                            <option value="@salary.Id">
                                @salary.HighestSalary - @salary.MinSalary -
                            </option>}
                    }
                </InputSelect>
                <ValidationMessage For="@(() => jobDetail.SalaryId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Job Location: </label>
            <div>
                <InputSelect @bind-Value="jobDetail.JoblocationId" class="form-control">
                    <option value="">-- Select Location --</option>
                    @if (JLocations != null)
                    {
                        foreach (var location in JLocations)
                        {
                            <option value="@location.Id">
                                @location.JobLocation - @location.PostalCode
                            </option>}
                    }
                </InputSelect>
                <ValidationMessage For="@(() => jobDetail.SalaryId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Job Category: </label>
            <div>
                <InputSelect @bind-Value="jobDetail.Jobcategoryid" class="form-control">
                    <option value="">-- Select Category--</option>
                    @if (Categories != null)
                    {
                        foreach (var category in Categories)
                        {
                            <option value="@category.Id">
                                @category.JobCategory
                            </option>}
                    }
                </InputSelect>
                <ValidationMessage For="@(() => jobDetail.SalaryId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Job Type: </label>
            <div>
                <InputSelect @bind-Value="jobDetail.Jobtypeid" class="form-control">
                    <option value="">-- Select type--</option>
                    @if (jobTypes != null)
                    {
                        foreach (var type in jobTypes)
                        {
                            <option value="@type.Id">
                                @type.Jobtype
                            </option>}
                    }
                </InputSelect>
                <ValidationMessage For="@(() => jobDetail.SalaryId)" />
            </div>
        </div>
        


    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
</EditForm>

@code {

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public JobDetail jobDetail { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Salary> Salaries;
    private IList<JLocation> JLocations;
    private IList<Category> Categories;
    private IList<JobType> jobTypes;

    protected async override Task OnInitializedAsync()
    {
        Salaries = await _client.GetFromJsonAsync<List<Salary>>($"{Endpoint.SalarysEndPoint}");
        JLocations = await _client.GetFromJsonAsync<List<JLocation>>($"{Endpoint.JLocationsEndPoint}");
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoint.CategorysEndPoint}");
        jobTypes = await _client.GetFromJsonAsync<List<JobType>>($"{Endpoint.JobTypesEndPoint}");
    }
}
